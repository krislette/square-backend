[
    {
        "token": "MULTI_COMMENT_TOKEN",
        "lexeme": "## This is a multiline comment and below is a model. ##",
        "line": 1,
        "column": 1
    },
    {
        "token": "KW_MOD_TOKEN",
        "lexeme": "mod",
        "line": 5,
        "column": 1
    },
    {
        "token": "IDENTIFIER_TOKEN",
        "lexeme": "student",
        "line": 5,
        "column": 5
    },
    {
        "token": "OPEN_SQUARE_TOKEN",
        "lexeme": "[",
        "line": 5,
        "column": 13
    },
    {
        "token": "IDENTIFIER_TOKEN",
        "lexeme": "id",
        "line": 6,
        "column": 5
    },
    {
        "token": "DATA_TYPE_ASSIGNMENT_TOKEN",
        "lexeme": ":",
        "line": 6,
        "column": 7
    },
    {
        "token": "KW_STRING_TOKEN",
        "lexeme": "str",
        "line": 6,
        "column": 9
    },
    {
        "token": "DELIMITER_TOKEN",
        "lexeme": ".",
        "line": 6,
        "column": 12
    },
    {
        "token": "IDENTIFIER_TOKEN",
        "lexeme": "name",
        "line": 7,
        "column": 5
    },
    {
        "token": "DATA_TYPE_ASSIGNMENT_TOKEN",
        "lexeme": ":",
        "line": 7,
        "column": 9
    },
    {
        "token": "KW_STRING_TOKEN",
        "lexeme": "str",
        "line": 7,
        "column": 11
    },
    {
        "token": "DELIMITER_TOKEN",
        "lexeme": ".",
        "line": 7,
        "column": 14
    },
    {
        "token": "IDENTIFIER_TOKEN",
        "lexeme": "age",
        "line": 8,
        "column": 5
    },
    {
        "token": "DATA_TYPE_ASSIGNMENT_TOKEN",
        "lexeme": ":",
        "line": 8,
        "column": 8
    },
    {
        "token": "KW_INT_TOKEN",
        "lexeme": "int",
        "line": 8,
        "column": 10
    },
    {
        "token": "DELIMITER_TOKEN",
        "lexeme": ".",
        "line": 8,
        "column": 13
    },
    {
        "token": "IDENTIFIER_TOKEN",
        "lexeme": "block",
        "line": 9,
        "column": 5
    },
    {
        "token": "DATA_TYPE_ASSIGNMENT_TOKEN",
        "lexeme": ":",
        "line": 9,
        "column": 10
    },
    {
        "token": "KW_STRING_TOKEN",
        "lexeme": "str",
        "line": 9,
        "column": 12
    },
    {
        "token": "DELIMITER_TOKEN",
        "lexeme": ".",
        "line": 9,
        "column": 15
    },
    {
        "token": "IDENTIFIER_TOKEN",
        "lexeme": "gpa",
        "line": 10,
        "column": 5
    },
    {
        "token": "DATA_TYPE_ASSIGNMENT_TOKEN",
        "lexeme": ":",
        "line": 10,
        "column": 8
    },
    {
        "token": "KW_FLOAT_TOKEN",
        "lexeme": "float",
        "line": 10,
        "column": 10
    },
    {
        "token": "DELIMITER_TOKEN",
        "lexeme": ".",
        "line": 10,
        "column": 15
    },
    {
        "token": "CLOSE_SQUARE_TOKEN",
        "lexeme": "]",
        "line": 11,
        "column": 1
    },
    {
        "token": "SINGLE_COMMENT_TOKEN",
        "lexeme": "# Batch update feature for the model",
        "line": 14,
        "column": 1
    },
    {
        "token": "FUNCTION_TOKEN",
        "lexeme": "fun",
        "line": 15,
        "column": 1
    },
    {
        "token": "IDENTIFIER_TOKEN",
        "lexeme": "demo_four",
        "line": 15,
        "column": 5
    },
    {
        "token": "OPEN_PARENTHESIS_TOKEN",
        "lexeme": "(",
        "line": 15,
        "column": 14
    },
    {
        "token": "CLOSE_PARENTHESIS_TOKEN",
        "lexeme": ")",
        "line": 15,
        "column": 15
    },
    {
        "token": "FUNCTION_TYPE_ASSIGNMENT_TOKEN",
        "lexeme": "->",
        "line": 15,
        "column": 17
    },
    {
        "token": "KW_VOID_TOKEN",
        "lexeme": "void",
        "line": 15,
        "column": 20
    },
    {
        "token": "OPEN_SQUARE_TOKEN",
        "lexeme": "[",
        "line": 15,
        "column": 25
    },
    {
        "token": "SINGLE_COMMENT_TOKEN",
        "lexeme": "# Initializing a variable of type `student` (from model)",
        "line": 16,
        "column": 5
    },
    {
        "token": "IDENTIFIER_TOKEN",
        "lexeme": "rosales",
        "line": 17,
        "column": 5
    },
    {
        "token": "DATA_TYPE_ASSIGNMENT_TOKEN",
        "lexeme": ":",
        "line": 17,
        "column": 12
    },
    {
        "token": "IDENTIFIER_TOKEN",
        "lexeme": "student",
        "line": 17,
        "column": 14
    },
    {
        "token": "OP_ASSIGNMENT_TOKEN",
        "lexeme": "=",
        "line": 17,
        "column": 22
    },
    {
        "token": "OPEN_SQUARE_TOKEN",
        "lexeme": "[",
        "line": 17,
        "column": 24
    },
    {
        "token": "STRING_LITERAL_TOKEN",
        "lexeme": "2022",
        "line": 17,
        "column": 25
    },
    {
        "token": "COMMA_TOKEN",
        "lexeme": ",",
        "line": 17,
        "column": 31
    },
    {
        "token": "STRING_LITERAL_TOKEN",
        "lexeme": "acelle",
        "line": 17,
        "column": 33
    },
    {
        "token": "COMMA_TOKEN",
        "lexeme": ",",
        "line": 17,
        "column": 41
    },
    {
        "token": "INT_LITERAL_TOKEN",
        "lexeme": "18",
        "line": 17,
        "column": 43
    },
    {
        "token": "COMMA_TOKEN",
        "lexeme": ",",
        "line": 17,
        "column": 45
    },
    {
        "token": "STRING_LITERAL_TOKEN",
        "lexeme": "3-5",
        "line": 17,
        "column": 47
    },
    {
        "token": "COMMA_TOKEN",
        "lexeme": ",",
        "line": 17,
        "column": 52
    },
    {
        "token": "FLOAT_LITERAL_TOKEN",
        "lexeme": "1.00",
        "line": 17,
        "column": 54
    },
    {
        "token": "CLOSE_SQUARE_TOKEN",
        "lexeme": "]",
        "line": 17,
        "column": 58
    },
    {
        "token": "DELIMITER_TOKEN",
        "lexeme": ".",
        "line": 17,
        "column": 59
    },
    {
        "token": "SINGLE_COMMENT_TOKEN",
        "lexeme": "# Batch updating some variables on studet `rosales`",
        "line": 19,
        "column": 5
    },
    {
        "token": "IDENTIFIER_TOKEN",
        "lexeme": "rosales",
        "line": 20,
        "column": 5
    },
    {
        "token": "ATTRIBUTE_ACCESS_TOKEN",
        "lexeme": ".",
        "line": 20,
        "column": 12
    },
    {
        "token": "OPEN_SQUARE_TOKEN",
        "lexeme": "[",
        "line": 20,
        "column": 13
    },
    {
        "token": "IDENTIFIER_TOKEN",
        "lexeme": "age",
        "line": 20,
        "column": 14
    },
    {
        "token": "COMMA_TOKEN",
        "lexeme": ",",
        "line": 20,
        "column": 17
    },
    {
        "token": "IDENTIFIER_TOKEN",
        "lexeme": "block",
        "line": 20,
        "column": 19
    },
    {
        "token": "CLOSE_SQUARE_TOKEN",
        "lexeme": "]",
        "line": 20,
        "column": 24
    },
    {
        "token": "OP_ASSIGNMENT_TOKEN",
        "lexeme": "=",
        "line": 20,
        "column": 26
    },
    {
        "token": "OPEN_SQUARE_TOKEN",
        "lexeme": "[",
        "line": 20,
        "column": 28
    },
    {
        "token": "INT_LITERAL_TOKEN",
        "lexeme": "19",
        "line": 20,
        "column": 29
    },
    {
        "token": "COMMA_TOKEN",
        "lexeme": ",",
        "line": 20,
        "column": 31
    },
    {
        "token": "STRING_LITERAL_TOKEN",
        "lexeme": "3-1N",
        "line": 20,
        "column": 33
    },
    {
        "token": "CLOSE_SQUARE_TOKEN",
        "lexeme": "]",
        "line": 20,
        "column": 39
    },
    {
        "token": "DELIMITER_TOKEN",
        "lexeme": ".",
        "line": 20,
        "column": 40
    },
    {
        "token": "CLOSE_SQUARE_TOKEN",
        "lexeme": "]",
        "line": 21,
        "column": 1
    },
    {
        "token": "SINGLE_COMMENT_TOKEN",
        "lexeme": "# Function to demonstrate different operators",
        "line": 24,
        "column": 1
    },
    {
        "token": "FUNCTION_TOKEN",
        "lexeme": "fun",
        "line": 25,
        "column": 1
    },
    {
        "token": "IDENTIFIER_TOKEN",
        "lexeme": "demo_three",
        "line": 25,
        "column": 5
    },
    {
        "token": "OPEN_PARENTHESIS_TOKEN",
        "lexeme": "(",
        "line": 25,
        "column": 15
    },
    {
        "token": "CLOSE_PARENTHESIS_TOKEN",
        "lexeme": ")",
        "line": 25,
        "column": 16
    },
    {
        "token": "FUNCTION_TYPE_ASSIGNMENT_TOKEN",
        "lexeme": "->",
        "line": 25,
        "column": 18
    },
    {
        "token": "KW_VOID_TOKEN",
        "lexeme": "void",
        "line": 25,
        "column": 21
    },
    {
        "token": "OPEN_SQUARE_TOKEN",
        "lexeme": "[",
        "line": 25,
        "column": 26
    },
    {
        "token": "KW_RETURN_TOKEN",
        "lexeme": "return",
        "line": 26,
        "column": 5
    },
    {
        "token": "OPEN_PARENTHESIS_TOKEN",
        "lexeme": "(",
        "line": 26,
        "column": 12
    },
    {
        "token": "FLOAT_LITERAL_TOKEN",
        "lexeme": "5.0",
        "line": 26,
        "column": 13
    },
    {
        "token": "OP_MINUS_TOKEN",
        "lexeme": "-",
        "line": 26,
        "column": 17
    },
    {
        "token": "FLOAT_LITERAL_TOKEN",
        "lexeme": "1.0",
        "line": 26,
        "column": 19
    },
    {
        "token": "OP_MULTIPLY_TOKEN",
        "lexeme": "*",
        "line": 26,
        "column": 23
    },
    {
        "token": "OPEN_PARENTHESIS_TOKEN",
        "lexeme": "(",
        "line": 26,
        "column": 25
    },
    {
        "token": "FLOAT_LITERAL_TOKEN",
        "lexeme": "8.0",
        "line": 26,
        "column": 26
    },
    {
        "token": "OP_DIVIDE_TOKEN",
        "lexeme": "/",
        "line": 26,
        "column": 30
    },
    {
        "token": "FLOAT_LITERAL_TOKEN",
        "lexeme": "4.0",
        "line": 26,
        "column": 32
    },
    {
        "token": "CLOSE_PARENTHESIS_TOKEN",
        "lexeme": ")",
        "line": 26,
        "column": 35
    },
    {
        "token": "CLOSE_PARENTHESIS_TOKEN",
        "lexeme": ")",
        "line": 26,
        "column": 36
    },
    {
        "token": "OP_GREATER_THAN_TOKEN",
        "lexeme": ">",
        "line": 26,
        "column": 38
    },
    {
        "token": "FLOAT_LITERAL_TOKEN",
        "lexeme": "10.0",
        "line": 26,
        "column": 40
    },
    {
        "token": "OP_MODULO_TOKEN",
        "lexeme": "%",
        "line": 26,
        "column": 45
    },
    {
        "token": "FLOAT_LITERAL_TOKEN",
        "lexeme": "3.0",
        "line": 26,
        "column": 47
    },
    {
        "token": "OP_EXPONENT_TOKEN",
        "lexeme": "**",
        "line": 26,
        "column": 51
    },
    {
        "token": "FLOAT_LITERAL_TOKEN",
        "lexeme": "6.0",
        "line": 26,
        "column": 54
    },
    {
        "token": "DELIMITER_TOKEN",
        "lexeme": ".",
        "line": 26,
        "column": 57
    },
    {
        "token": "CLOSE_SQUARE_TOKEN",
        "lexeme": "]",
        "line": 27,
        "column": 1
    },
    {
        "token": "SINGLE_COMMENT_TOKEN",
        "lexeme": "# FizzBuzz implementation in Square",
        "line": 30,
        "column": 1
    },
    {
        "token": "FUNCTION_TOKEN",
        "lexeme": "fun",
        "line": 31,
        "column": 1
    },
    {
        "token": "IDENTIFIER_TOKEN",
        "lexeme": "demo_two",
        "line": 31,
        "column": 5
    },
    {
        "token": "OPEN_PARENTHESIS_TOKEN",
        "lexeme": "(",
        "line": 31,
        "column": 13
    },
    {
        "token": "CLOSE_PARENTHESIS_TOKEN",
        "lexeme": ")",
        "line": 31,
        "column": 14
    },
    {
        "token": "FUNCTION_TYPE_ASSIGNMENT_TOKEN",
        "lexeme": "->",
        "line": 31,
        "column": 16
    },
    {
        "token": "KW_VOID_TOKEN",
        "lexeme": "void",
        "line": 31,
        "column": 19
    },
    {
        "token": "OPEN_SQUARE_TOKEN",
        "lexeme": "[",
        "line": 31,
        "column": 24
    },
    {
        "token": "KW_LOOP_TOKEN",
        "lexeme": "loop",
        "line": 32,
        "column": 5
    },
    {
        "token": "IDENTIFIER_TOKEN",
        "lexeme": "i",
        "line": 32,
        "column": 10
    },
    {
        "token": "DATA_TYPE_ASSIGNMENT_TOKEN",
        "lexeme": ":",
        "line": 32,
        "column": 11
    },
    {
        "token": "KW_INT_TOKEN",
        "lexeme": "int",
        "line": 32,
        "column": 13
    },
    {
        "token": "NW_IN_TOKEN",
        "lexeme": "in",
        "line": 32,
        "column": 17
    },
    {
        "token": "KW_RANGE_TOKEN",
        "lexeme": "range",
        "line": 32,
        "column": 20
    },
    {
        "token": "OPEN_PARENTHESIS_TOKEN",
        "lexeme": "(",
        "line": 32,
        "column": 25
    },
    {
        "token": "INT_LITERAL_TOKEN",
        "lexeme": "0",
        "line": 32,
        "column": 26
    },
    {
        "token": "COMMA_TOKEN",
        "lexeme": ",",
        "line": 32,
        "column": 27
    },
    {
        "token": "INT_LITERAL_TOKEN",
        "lexeme": "20",
        "line": 32,
        "column": 29
    },
    {
        "token": "COMMA_TOKEN",
        "lexeme": ",",
        "line": 32,
        "column": 31
    },
    {
        "token": "IDENTIFIER_TOKEN",
        "lexeme": "i",
        "line": 32,
        "column": 33
    },
    {
        "token": "OP_INCREMENT_TOKEN",
        "lexeme": "++",
        "line": 32,
        "column": 34
    },
    {
        "token": "CLOSE_PARENTHESIS_TOKEN",
        "lexeme": ")",
        "line": 32,
        "column": 36
    },
    {
        "token": "OPEN_SQUARE_TOKEN",
        "lexeme": "[",
        "line": 32,
        "column": 38
    },
    {
        "token": "KW_WHEN_TOKEN",
        "lexeme": "when",
        "line": 33,
        "column": 9
    },
    {
        "token": "OPEN_SQUARE_TOKEN",
        "lexeme": "[",
        "line": 33,
        "column": 14
    },
    {
        "token": "IDENTIFIER_TOKEN",
        "lexeme": "i",
        "line": 34,
        "column": 13
    },
    {
        "token": "OP_MODULO_TOKEN",
        "lexeme": "%",
        "line": 34,
        "column": 15
    },
    {
        "token": "INT_LITERAL_TOKEN",
        "lexeme": "3",
        "line": 34,
        "column": 17
    },
    {
        "token": "OP_EQUAL_TOKEN",
        "lexeme": "==",
        "line": 34,
        "column": 19
    },
    {
        "token": "INT_LITERAL_TOKEN",
        "lexeme": "0",
        "line": 34,
        "column": 22
    },
    {
        "token": "OP_LOGICAL_AND_TOKEN",
        "lexeme": "&&",
        "line": 34,
        "column": 24
    },
    {
        "token": "IDENTIFIER_TOKEN",
        "lexeme": "i",
        "line": 34,
        "column": 27
    },
    {
        "token": "OP_MODULO_TOKEN",
        "lexeme": "%",
        "line": 34,
        "column": 29
    },
    {
        "token": "INT_LITERAL_TOKEN",
        "lexeme": "5",
        "line": 34,
        "column": 31
    },
    {
        "token": "OP_EQUAL_TOKEN",
        "lexeme": "==",
        "line": 34,
        "column": 33
    },
    {
        "token": "INT_LITERAL_TOKEN",
        "lexeme": "0",
        "line": 34,
        "column": 36
    },
    {
        "token": "SCOPE_RESOLUTION_TOKEN",
        "lexeme": "::",
        "line": 34,
        "column": 38
    },
    {
        "token": "OPEN_SQUARE_TOKEN",
        "lexeme": "[",
        "line": 34,
        "column": 41
    },
    {
        "token": "KW_PRINT_TOKEN",
        "lexeme": "print",
        "line": 35,
        "column": 17
    },
    {
        "token": "OPEN_PARENTHESIS_TOKEN",
        "lexeme": "(",
        "line": 35,
        "column": 22
    },
    {
        "token": "STRING_LITERAL_TOKEN",
        "lexeme": "FizzBuzz",
        "line": 35,
        "column": 23
    },
    {
        "token": "CLOSE_PARENTHESIS_TOKEN",
        "lexeme": ")",
        "line": 35,
        "column": 33
    },
    {
        "token": "DELIMITER_TOKEN",
        "lexeme": ".",
        "line": 35,
        "column": 34
    },
    {
        "token": "CLOSE_SQUARE_TOKEN",
        "lexeme": "]",
        "line": 36,
        "column": 13
    },
    {
        "token": "IDENTIFIER_TOKEN",
        "lexeme": "i",
        "line": 37,
        "column": 13
    },
    {
        "token": "OP_MODULO_TOKEN",
        "lexeme": "%",
        "line": 37,
        "column": 15
    },
    {
        "token": "INT_LITERAL_TOKEN",
        "lexeme": "3",
        "line": 37,
        "column": 17
    },
    {
        "token": "OP_EQUAL_TOKEN",
        "lexeme": "==",
        "line": 37,
        "column": 19
    },
    {
        "token": "INT_LITERAL_TOKEN",
        "lexeme": "0",
        "line": 37,
        "column": 22
    },
    {
        "token": "SCOPE_RESOLUTION_TOKEN",
        "lexeme": "::",
        "line": 37,
        "column": 24
    },
    {
        "token": "OPEN_SQUARE_TOKEN",
        "lexeme": "[",
        "line": 37,
        "column": 27
    },
    {
        "token": "KW_PRINT_TOKEN",
        "lexeme": "print",
        "line": 38,
        "column": 17
    },
    {
        "token": "OPEN_PARENTHESIS_TOKEN",
        "lexeme": "(",
        "line": 38,
        "column": 22
    },
    {
        "token": "STRING_LITERAL_TOKEN",
        "lexeme": "Fizz",
        "line": 38,
        "column": 23
    },
    {
        "token": "CLOSE_PARENTHESIS_TOKEN",
        "lexeme": ")",
        "line": 38,
        "column": 29
    },
    {
        "token": "DELIMITER_TOKEN",
        "lexeme": ".",
        "line": 38,
        "column": 30
    },
    {
        "token": "CLOSE_SQUARE_TOKEN",
        "lexeme": "]",
        "line": 39,
        "column": 13
    },
    {
        "token": "IDENTIFIER_TOKEN",
        "lexeme": "i",
        "line": 40,
        "column": 13
    },
    {
        "token": "OP_MODULO_TOKEN",
        "lexeme": "%",
        "line": 40,
        "column": 15
    },
    {
        "token": "INT_LITERAL_TOKEN",
        "lexeme": "5",
        "line": 40,
        "column": 17
    },
    {
        "token": "OP_EQUAL_TOKEN",
        "lexeme": "==",
        "line": 40,
        "column": 19
    },
    {
        "token": "INT_LITERAL_TOKEN",
        "lexeme": "0",
        "line": 40,
        "column": 22
    },
    {
        "token": "SCOPE_RESOLUTION_TOKEN",
        "lexeme": "::",
        "line": 40,
        "column": 24
    },
    {
        "token": "OPEN_SQUARE_TOKEN",
        "lexeme": "[",
        "line": 40,
        "column": 27
    },
    {
        "token": "KW_PRINT_TOKEN",
        "lexeme": "print",
        "line": 41,
        "column": 17
    },
    {
        "token": "OPEN_PARENTHESIS_TOKEN",
        "lexeme": "(",
        "line": 41,
        "column": 22
    },
    {
        "token": "STRING_LITERAL_TOKEN",
        "lexeme": "Buzz",
        "line": 41,
        "column": 23
    },
    {
        "token": "CLOSE_PARENTHESIS_TOKEN",
        "lexeme": ")",
        "line": 41,
        "column": 29
    },
    {
        "token": "CLOSE_SQUARE_TOKEN",
        "lexeme": "]",
        "line": 42,
        "column": 13
    },
    {
        "token": "CLOSE_SQUARE_TOKEN",
        "lexeme": "]",
        "line": 43,
        "column": 9
    },
    {
        "token": "CLOSE_SQUARE_TOKEN",
        "lexeme": "]",
        "line": 44,
        "column": 5
    },
    {
        "token": "CLOSE_SQUARE_TOKEN",
        "lexeme": "]",
        "line": 45,
        "column": 1
    },
    {
        "token": "SINGLE_COMMENT_TOKEN",
        "lexeme": "# A function to showcase a loop with a conditional",
        "line": 48,
        "column": 1
    },
    {
        "token": "FUNCTION_TOKEN",
        "lexeme": "fun",
        "line": 49,
        "column": 1
    },
    {
        "token": "IDENTIFIER_TOKEN",
        "lexeme": "demo_one",
        "line": 49,
        "column": 5
    },
    {
        "token": "OPEN_PARENTHESIS_TOKEN",
        "lexeme": "(",
        "line": 49,
        "column": 13
    },
    {
        "token": "CLOSE_PARENTHESIS_TOKEN",
        "lexeme": ")",
        "line": 49,
        "column": 14
    },
    {
        "token": "FUNCTION_TYPE_ASSIGNMENT_TOKEN",
        "lexeme": "->",
        "line": 49,
        "column": 16
    },
    {
        "token": "KW_VOID_TOKEN",
        "lexeme": "void",
        "line": 49,
        "column": 19
    },
    {
        "token": "OPEN_SQUARE_TOKEN",
        "lexeme": "[",
        "line": 49,
        "column": 24
    },
    {
        "token": "IDENTIFIER_TOKEN",
        "lexeme": "counter",
        "line": 50,
        "column": 5
    },
    {
        "token": "DATA_TYPE_ASSIGNMENT_TOKEN",
        "lexeme": ":",
        "line": 50,
        "column": 12
    },
    {
        "token": "KW_INT_TOKEN",
        "lexeme": "int",
        "line": 50,
        "column": 14
    },
    {
        "token": "OP_ASSIGNMENT_TOKEN",
        "lexeme": "=",
        "line": 50,
        "column": 18
    },
    {
        "token": "INT_LITERAL_TOKEN",
        "lexeme": "5",
        "line": 50,
        "column": 20
    },
    {
        "token": "DELIMITER_TOKEN",
        "lexeme": ".",
        "line": 50,
        "column": 21
    },
    {
        "token": "KW_LOOP_TOKEN",
        "lexeme": "loop",
        "line": 51,
        "column": 5
    },
    {
        "token": "OPEN_SQUARE_TOKEN",
        "lexeme": "[",
        "line": 51,
        "column": 10
    },
    {
        "token": "KW_PRINT_TOKEN",
        "lexeme": "print",
        "line": 52,
        "column": 9
    },
    {
        "token": "OPEN_PARENTHESIS_TOKEN",
        "lexeme": "(",
        "line": 52,
        "column": 14
    },
    {
        "token": "STRING_LITERAL_TOKEN",
        "lexeme": "Hello from the square team!",
        "line": 52,
        "column": 15
    },
    {
        "token": "CLOSE_PARENTHESIS_TOKEN",
        "lexeme": ")",
        "line": 52,
        "column": 44
    },
    {
        "token": "DELIMITER_TOKEN",
        "lexeme": ".",
        "line": 52,
        "column": 45
    },
    {
        "token": "KW_WHEN_TOKEN",
        "lexeme": "when",
        "line": 53,
        "column": 9
    },
    {
        "token": "IDENTIFIER_TOKEN",
        "lexeme": "counter",
        "line": 53,
        "column": 14
    },
    {
        "token": "OPEN_SQUARE_TOKEN",
        "lexeme": "[",
        "line": 53,
        "column": 22
    },
    {
        "token": "OP_EQUAL_TOKEN",
        "lexeme": "==",
        "line": 54,
        "column": 13
    },
    {
        "token": "INT_LITERAL_TOKEN",
        "lexeme": "5",
        "line": 54,
        "column": 16
    },
    {
        "token": "SCOPE_RESOLUTION_TOKEN",
        "lexeme": "::",
        "line": 54,
        "column": 18
    },
    {
        "token": "KW_EXIT_TOKEN",
        "lexeme": "exit",
        "line": 54,
        "column": 21
    },
    {
        "token": "DELIMITER_TOKEN",
        "lexeme": ".",
        "line": 54,
        "column": 25
    },
    {
        "token": "CLOSE_SQUARE_TOKEN",
        "lexeme": "]",
        "line": 55,
        "column": 9
    },
    {
        "token": "CLOSE_SQUARE_TOKEN",
        "lexeme": "]",
        "line": 56,
        "column": 5
    },
    {
        "token": "CLOSE_SQUARE_TOKEN",
        "lexeme": "]",
        "line": 57,
        "column": 1
    },
    {
        "token": "SINGLE_COMMENT_TOKEN",
        "lexeme": "# Main driver ",
        "line": 60,
        "column": 1
    },
    {
        "token": "FUNCTION_TOKEN",
        "lexeme": "fun",
        "line": 61,
        "column": 1
    },
    {
        "token": "RW_MAIN_TOKEN",
        "lexeme": "main",
        "line": 61,
        "column": 5
    },
    {
        "token": "OPEN_PARENTHESIS_TOKEN",
        "lexeme": "(",
        "line": 61,
        "column": 9
    },
    {
        "token": "CLOSE_PARENTHESIS_TOKEN",
        "lexeme": ")",
        "line": 61,
        "column": 10
    },
    {
        "token": "FUNCTION_TYPE_ASSIGNMENT_TOKEN",
        "lexeme": "->",
        "line": 61,
        "column": 12
    },
    {
        "token": "KW_VOID_TOKEN",
        "lexeme": "void",
        "line": 61,
        "column": 15
    },
    {
        "token": "OPEN_SQUARE_TOKEN",
        "lexeme": "[",
        "line": 61,
        "column": 20
    },
    {
        "token": "KW_PRINT_TOKEN",
        "lexeme": "print",
        "line": 62,
        "column": 5
    },
    {
        "token": "OPEN_PARENTHESIS_TOKEN",
        "lexeme": "(",
        "line": 62,
        "column": 10
    },
    {
        "token": "STRING_LITERAL_TOKEN",
        "lexeme": "This is a sample program for Square.",
        "line": 62,
        "column": 11
    },
    {
        "token": "CLOSE_PARENTHESIS_TOKEN",
        "lexeme": ")",
        "line": 62,
        "column": 49
    },
    {
        "token": "DELIMITER_TOKEN",
        "lexeme": ".",
        "line": 62,
        "column": 50
    },
    {
        "token": "SINGLE_COMMENT_TOKEN",
        "lexeme": "# Function call for loop demo",
        "line": 64,
        "column": 5
    },
    {
        "token": "IDENTIFIER_TOKEN",
        "lexeme": "demo_one",
        "line": 65,
        "column": 5
    },
    {
        "token": "OPEN_PARENTHESIS_TOKEN",
        "lexeme": "(",
        "line": 65,
        "column": 13
    },
    {
        "token": "CLOSE_PARENTHESIS_TOKEN",
        "lexeme": ")",
        "line": 65,
        "column": 14
    },
    {
        "token": "DELIMITER_TOKEN",
        "lexeme": ".",
        "line": 65,
        "column": 15
    },
    {
        "token": "SINGLE_COMMENT_TOKEN",
        "lexeme": "# Function call for conditional demo",
        "line": 67,
        "column": 5
    },
    {
        "token": "IDENTIFIER_TOKEN",
        "lexeme": "demo_two",
        "line": 68,
        "column": 5
    },
    {
        "token": "OPEN_PARENTHESIS_TOKEN",
        "lexeme": "(",
        "line": 68,
        "column": 13
    },
    {
        "token": "CLOSE_PARENTHESIS_TOKEN",
        "lexeme": ")",
        "line": 68,
        "column": 14
    },
    {
        "token": "DELIMITER_TOKEN",
        "lexeme": ".",
        "line": 68,
        "column": 15
    },
    {
        "token": "SINGLE_COMMENT_TOKEN",
        "lexeme": "# Function call for operator demo",
        "line": 70,
        "column": 5
    },
    {
        "token": "IDENTIFIER_TOKEN",
        "lexeme": "demo_three",
        "line": 71,
        "column": 5
    },
    {
        "token": "OPEN_PARENTHESIS_TOKEN",
        "lexeme": "(",
        "line": 71,
        "column": 15
    },
    {
        "token": "CLOSE_PARENTHESIS_TOKEN",
        "lexeme": ")",
        "line": 71,
        "column": 16
    },
    {
        "token": "DELIMITER_TOKEN",
        "lexeme": ".",
        "line": 71,
        "column": 17
    },
    {
        "token": "SINGLE_COMMENT_TOKEN",
        "lexeme": "# Function call for model demo",
        "line": 73,
        "column": 5
    },
    {
        "token": "IDENTIFIER_TOKEN",
        "lexeme": "demo_four",
        "line": 74,
        "column": 5
    },
    {
        "token": "OPEN_PARENTHESIS_TOKEN",
        "lexeme": "(",
        "line": 74,
        "column": 14
    },
    {
        "token": "CLOSE_PARENTHESIS_TOKEN",
        "lexeme": ")",
        "line": 74,
        "column": 15
    },
    {
        "token": "DELIMITER_TOKEN",
        "lexeme": ".",
        "line": 74,
        "column": 16
    },
    {
        "token": "CLOSE_SQUARE_TOKEN",
        "lexeme": "]",
        "line": 75,
        "column": 1
    }
]